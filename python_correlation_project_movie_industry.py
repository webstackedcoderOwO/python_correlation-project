# -*- coding: utf-8 -*-
"""python-correlation-project-movie-industry.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kxvp_W1HJMRC5P6Awt8bA5TnEBpmrsCU
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing Libraries
import pandas as pd
import seaborn as sns
import numpy as np

# Importing Matplotlib Libraries
import matplotlib
import matplotlib.pyplot as plt
plt.style.use('ggplot')
# %matplotlib inline

# Adjusts the Configuration of Plots we will Create
matplotlib.rcParams['figure.figsize'] = (12, 8)

# Ignore any Warnings
import warnings
warnings.filterwarnings("ignore")

# Importing our Dataset
df = pd.read_csv("/content/movies.csv")

df

df.head()

df.head(10)

df.tail()

df.tail(10)

# Check if their is any Missing Data
df.isnull().sum()

for col in df.columns:
  pct_missing = np.mean(df[col].isnull())
  print('{} - {}%'.format(col, pct_missing))

# Checking the Datatypes for our Columns
df.dtypes

df = df.dropna()

df.isnull().sum()

df['budget'] = df['budget'].astype('int')
df['gross'] = df['gross'].astype('int')

df.dtypes

df

# Creating Correct Year Column
df['yearcorrect'] = df['released'].astype(str).str[:4]

df.sort_values(by=['gross'], inplace=False, ascending=False)

pd.set_option('display.max_rows', None)

df.sort_values(by=['gross'], inplace=False, ascending=False)

# Dropping any Duplicates
df['company'].drop_duplicates().sort_values(ascending=False)

df.corr()

df

# Budget High Correlation
# Company High Correlation
# Making a Scatter Plot between Budget and Gross
plt.scatter(x=df['budget'], y=df['gross'])
plt.title('Budget vs Gross Earnings Plot')
plt.xlabel('Budget for Films')
plt.ylabel('Gross Earnings')
plt.savefig('Budget vs Gross Earnings Plot.png')
plt.show()

# Plot Budget vs Gross Using Seaborn
sns.regplot(x='budget', y='gross', data=df, scatter_kws={"color" : "blue"}, line_kws={"color" : "red"})

# Let's Start Looking at different types of Correlation
# Their are three types of Correlation - pearson, kendall, spearman

# 1. pearson
correlation_matrix = df.corr()
pearson_correlation_matrix = df.corr(method='pearson')
kendall_correlation_matrix = df.corr(method='kendall')
spearman_correlation_matrix = df.corr(method='spearman')

correlation_matrix

# Plotting a Heatmap for Correlation Matrix
sns.heatmap(correlation_matrix, annot = True)

# Looks at the Company
df['company'].head(10)

df_numerized = df
for col_name in df_numerized.columns:
  if(df_numerized[col_name].dtype == 'object'):
    df_numerized[col_name] = df_numerized[col_name].astype('category')
    df_numerized[col_name] = df_numerized[col_name].cat.codes
df_numerized

df

df_numerized_corr = df_numerized.corr()

df_numerized_corr

# Getting cmaps from https://seaborn.pydata.org/tutorial/color_palettes.html
sns.heatmap(df_numerized_corr, annot=True, cmap='viridis')

# unstack() Compares each Column Pair by Pair
corr_pairs = df_numerized_corr.unstack()
corr_pairs

sorted_pairs = corr_pairs.sort_values()
sorted_pairs

high_corr = sorted_pairs[(sorted_pairs) > 0.5]
high_corr

# Votes and Budget have the highest Correlation to Gross Earnings
# Company has Low Correlation